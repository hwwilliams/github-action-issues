name: receive-dispatch

env:
  ISSUE_LABEL_CSV: bug
  ISSUE_MILESTONE: Test Milestone
  ISSUE_PROJECT: Test Project # CLI doesn't support new projects: https://github.com/cli/cli/issues/4547
  ISSUE_TITLE_PREFIX: Workflow Failed

on:
  workflow_dispatch:
    inputs:
      FAILED_WORKFLOW_REPO_NAME:
        required: true
        type: string
      FAILED_WORKFLOW_RUN_ID:
        required: true
        type: string

jobs:
  receive-dispatch:
    runs-on: ubuntu-latest

    steps:
    - name: Get Failed Workflow Details and Logs
      shell: pwsh
      run: |
        Write-Output "Getting workflow logs from repo '${{ inputs.FAILED_WORKFLOW_REPO_NAME }}' and workflow with ID '${{ inputs.FAILED_WORKFLOW_RUN_ID }}'."

        # Get all jobs from workflow run
        $RunDetails = gh run -R https://github.com/asdasdaasd${{ inputs.FAILED_WORKFLOW_REPO_NAME }} view ${{ inputs.FAILED_WORKFLOW_RUN_ID }}

        if ($null -eq $RunDetails)
        {
          Write-Error "Workflow run details is null, workflow job information not found."
        }

        # Regex match failed job IDs
        $FailedJobIds = $RunDetails.ForEach({ [Regex]::Match($PSItem, '^X.+\(ID\s([0-9]+)\)') }).Where({ $PSItem.Success }).Groups.Where({ $PSItem.Name -eq 1 }).Value

        if ($FailedJobIds.Count -eq 0)
        {
          Write-Error "Found 0 workflow job IDs, at least 1 workflow job ID should be found if the workflow is ran."
        }

        # Get failed job workflow logs
        $FailedJobLogs = $FailedJobIds.ForEach({ gh run -R https://github.com/${{ inputs.FAILED_WORKFLOW_REPO_NAME }} view -j $PSItem --log-failed }) | Sort-Object

        # Remove ANSI color codes from output
        $CleanFailedJobLogs = $FailedJobLogs.ForEach({ $PSItem -replace '\x1b\[[0-9;]*m','' })

        if (($null -eq $FailedJobLogs) -or ($null -eq $CleanFailedJobLogs))
        {
          Write-Error "Workflow job logs is null, workflow job logs not found."
        }

        # Build GitHub issue body content
        $IssueBodyContent = @()
        $IssueBodyContent += '### Context'
        $IssueBodyContent += 'Repository: https://github.com/${{ inputs.FAILED_WORKFLOW_REPO_NAME }}'
        $IssueBodyContent += 'Failed Workflow Name: ${{ github.workflow }}'
        $IssueBodyContent += 'Failed Workflow Run: https://github.com/${{ inputs.FAILED_WORKFLOW_REPO_NAME }}/actions/runs/${{ inputs.FAILED_WORKFLOW_RUN_ID }}'
        $IssueBodyContent += ''
        $IssueBodyContent += '### Error'
        $IssueBodyContent += '```txt'
        $IssueBodyContent += $CleanFailedJobLogs
        $IssueBodyContent += '```'
        $IssueBodyContentPath = ".\IssueBodyContent.txt"
        $IssueBodyContent | Out-File -FilePath $IssueBodyContentPath -Force
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN_PAT }}

    - name: Create Failed Workflow Issue
      shell: pwsh
      run: |
        $IssueRepo = "https://github.com/${{ github.repository }}"
        $IssueTitle = "${{ env.ISSUE_TITLE_PREFIX }} - ${{ inputs.FAILED_WORKFLOW_REPO_NAME }}"
        $IssueBodyContentPath = (Resolve-Path ".\IssueBodyContent.txt").Path

        Write-Output "Creating GitHub issue '$IssueTitle' in repo '$IssueRepo'."
        gh issue create --repo "$IssueRepo" --title "$IssueTitle" `
          --body-file "$IssueBodyContentPath" `
          --milestone "${{ env.ISSUE_MILESTONE }}" `
          --label "${{ env.ISSUE_LABEL_CSV }}"
      env:
        GH_TOKEN: ${{ github.token }}
